/*
 * libcommon
 *
 * Copyright (c) 2020  frezrik@126.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'signing'

def isAndroid() {
  return project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().
      hasPlugin('com.android.library')
}

def isJava() {
  return project.getPlugins().hasPlugin('java-library')
}

def getLocalRepositoryUrl() {
  return hasProperty('LOCAL_REPOSITORY_URL') ? LOCAL_REPOSITORY_URL
      : rootProject.rootDir.toString() + (isAndroid() || isJava() ? "/Repository/lilbrary" : "/Repository/plugin")
}

afterEvaluate { project ->
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: uri(getLocalRepositoryUrl()))

        pom.project {
          name POM_NAME
          groupId GROUP
          artifactId POM_ARTIFACT_ID
          version VERSION_NAME
          packaging POM_PACKAGING
          description POM_DESCRIPTION
          url POM_URL

          licenses {
            license {
              name POM_LICENCE_NAME
              url POM_LICENCE_URL
              distribution POM_LICENCE_DIST
            }
          }

          developers {
            developer {
              id POM_DEVELOPER_ID
              name POM_DEVELOPER_NAME
              email POM_DEVELOPER_EMAIL
            }
          }
        }
      }
    }
  }

  signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }

  if (isAndroid()) {
    task androidJavadocs(type: Javadoc) {
      options.addStringOption('encoding', 'UTF-8')
      options.addStringOption('charSet', 'UTF-8')
      options.addStringOption('public', '-quiet')
      options.addStringOption('Xdoclint:none', '-quiet')
      exclude(
          '**/BaseConfig.java',
          '**/R.java'
      )
      include(
          '**/com/frezrik/common/api/*.java'
      )

      failOnError false
      source = android.sourceSets.main.java.source
      classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
      classpath +=
          project.android.libraryVariants.toList().first().javaCompileProvider.get().classpath
      classpath +=
          project.android.libraryVariants.toList().first().javaCompileProvider.get().outputs.files
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
      classifier = 'javadoc'
      from androidJavadocs.destinationDir
    }

    /*task androidSourcesJar(type: Jar) {
      classifier = 'sources'
      from android.sourceSets.main.java.source
    }
  } else {
    task sourcesJar(type: Jar, dependsOn: classes) {
      classifier = 'sources'
      from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
    }*/
  }

  artifacts {
    if (isAndroid()) {
      //archives androidSourcesJar
      archives androidJavadocsJar
    }/* else {
      archives sourcesJar
      archives javadocJar
    }*/
  }
}